/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Vistas;

import Colores.ColorCeldas;
import Entidades.Detalle;
import Entidades.Mesa;
import Entidades.Mesero;
import Persistencia.DetalleData;

import Persistencia.MesaData;
import Persistencia.PedidoData;
import java.util.ArrayList;
import javax.swing.JFrame;
import javax.swing.JInternalFrame;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author mmaci
 */
public final class VistaPrincipal extends javax.swing.JFrame {

    PedidoData pedido = new PedidoData();
    DetalleData cone = new DetalleData();
    private ColorCeldas colorCeldas = new ColorCeldas();
    private MesaData con = new MesaData();
    static Mesa mesa;
    static int id;
    static Detalle detalle;

    DefaultTableModel modelo = new DefaultTableModel() {
        @Override
        public boolean isCellEditable(int fila, int columna) {
            return false;
        }

    };

    public static Detalle getDetalle() {
        return detalle;
    }

    public static void setDetalle(Detalle detalle) {
        VistaPrincipal.detalle = detalle;
    }

    public static int getId() {
        return id;
    }

    public static void setId(int id) {
        VistaPrincipal.id = id;
    }

    private Mesero mozo;

    public static Mesa getMesa() {
        return mesa;
    }

    public static void setMesa(Mesa mesa) {
        VistaPrincipal.mesa = mesa;
    }

    /**
     * Creates new form JfremePrincipal
     *
     * @param mozo
     */
    public VistaPrincipal() {
        initComponents();
        iniciarTabla();
        jLabel1.setText("Bienvenido " + VistaLogin.getMozo().getNombre());
        llenarTabla();
        Tabla.setDefaultRenderer(Object.class, colorCeldas);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent e) {
                // Mostrar una confirmación antes de cerrar
                int opcion = JOptionPane.showConfirmDialog(null, "¿Estás seguro de que deseas salir?",
                        "Confirmación de salida", JOptionPane.YES_NO_OPTION);

                if (opcion == JOptionPane.YES_OPTION) {
                    System.exit(0); // Cerrar la aplicación
                }
            }
        });

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        escritorio = new javax.swing.JDesktopPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        Tabla = new javax.swing.JTable();
        jButtonCrearMesa = new javax.swing.JButton();
        jButtonReservar = new javax.swing.JButton();
        jButtonInventario = new javax.swing.JButton();
        btnBorrarMesa = new javax.swing.JButton();
        btnCargarPedido = new javax.swing.JButton();
        btnCobrar = new javax.swing.JButton();
        jButtonCerrar = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        btnActualizarMesa = new javax.swing.JButton();
        jButtonPedido3 = new javax.swing.JButton();
        rdbLibres = new javax.swing.JRadioButton();
        rdbOcupados = new javax.swing.JRadioButton();
        rdbReserva = new javax.swing.JRadioButton();
        jLabel2 = new javax.swing.JLabel();
        rdbConPedido = new javax.swing.JRadioButton();
        jLabel3 = new javax.swing.JLabel();
        rdbSinPedido = new javax.swing.JRadioButton();
        rdbSinReserva = new javax.swing.JRadioButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        Tabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        Tabla.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TablaMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(Tabla);

        jButtonCrearMesa.setText("Crear Mesa");
        jButtonCrearMesa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCrearMesaActionPerformed(evt);
            }
        });

        jButtonReservar.setText("Gestion De Reservas");
        jButtonReservar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonReservarActionPerformed(evt);
            }
        });

        jButtonInventario.setText("Inventario");
        jButtonInventario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonInventarioActionPerformed(evt);
            }
        });

        btnBorrarMesa.setText("Borrar Mesa");
        btnBorrarMesa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBorrarMesaActionPerformed(evt);
            }
        });

        btnCargarPedido.setText("Cargar Pedido");
        btnCargarPedido.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCargarPedidoActionPerformed(evt);
            }
        });

        btnCobrar.setText("Cobrar Mesa");
        btnCobrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCobrarActionPerformed(evt);
            }
        });

        jButtonCerrar.setText("Cerrar Sesion");
        jButtonCerrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCerrarActionPerformed(evt);
            }
        });

        jLabel1.setText("Nombre Mesero");

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);

        btnActualizarMesa.setText("Actualizar Mesa");
        btnActualizarMesa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActualizarMesaActionPerformed(evt);
            }
        });

        jButtonPedido3.setText("Pedidos");
        jButtonPedido3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPedido3ActionPerformed(evt);
            }
        });

        rdbLibres.setText("Libres");
        rdbLibres.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdbLibresActionPerformed(evt);
            }
        });

        rdbOcupados.setText("Ocupados");
        rdbOcupados.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdbOcupadosActionPerformed(evt);
            }
        });

        rdbReserva.setText("Con Reserva");
        rdbReserva.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdbReservaActionPerformed(evt);
            }
        });

        jLabel2.setText("Filtrar por:");

        rdbConPedido.setText("Con Pedidos");
        rdbConPedido.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdbConPedidoActionPerformed(evt);
            }
        });

        jLabel3.setText("Lista de Mesas");

        rdbSinPedido.setText("Sin Pedidos");
        rdbSinPedido.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdbSinPedidoActionPerformed(evt);
            }
        });

        rdbSinReserva.setText("Sin Reserva");
        rdbSinReserva.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdbSinReservaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel3))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 457, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jButtonPedido3, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnCargarPedido, javax.swing.GroupLayout.DEFAULT_SIZE, 146, Short.MAX_VALUE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jButtonInventario, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnCobrar, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jButtonReservar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnActualizarMesa, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jButtonCrearMesa, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(1, 1, 1)
                                .addComponent(btnBorrarMesa, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addContainerGap(30, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jButtonCerrar, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addContainerGap())
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(rdbOcupados)
                            .addComponent(rdbLibres)
                            .addComponent(rdbReserva)
                            .addComponent(rdbConPedido)
                            .addComponent(rdbSinPedido)
                            .addComponent(rdbSinReserva))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonCrearMesa)
                    .addComponent(btnBorrarMesa))
                .addGap(11, 11, 11)
                .addComponent(btnActualizarMesa)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonInventario)
                    .addComponent(btnCobrar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButtonReservar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCargarPedido)
                    .addComponent(jButtonPedido3))
                .addGap(31, 31, 31)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rdbLibres)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rdbOcupados)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rdbReserva)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rdbSinReserva)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rdbConPedido)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rdbSinPedido)
                .addGap(32, 32, 32)
                .addComponent(jButtonCerrar)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 518, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 499, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        escritorio.setLayer(jPanel1, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout escritorioLayout = new javax.swing.GroupLayout(escritorio);
        escritorio.setLayout(escritorioLayout);
        escritorioLayout.setHorizontalGroup(
            escritorioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        escritorioLayout.setVerticalGroup(
            escritorioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, escritorioLayout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(escritorio)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(escritorio)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnActualizarMesaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActualizarMesaActionPerformed
        try {
            VistaActualizarMesa a1 = null;
            a1 = new VistaActualizarMesa(this);
            escritorio.add(a1);
            a1.setVisible(true);
            escritorio.moveToFront(a1);
            actualizarTabla();
        } catch (NullPointerException n) {
            JOptionPane.showMessageDialog(this, "Seleccione una mesa");
        }


    }//GEN-LAST:event_btnActualizarMesaActionPerformed

    private void jButtonCerrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCerrarActionPerformed
        VistaLogin ventana2 = new VistaLogin();
        ventana2.setLocationRelativeTo(null);
        // Mostrar la ventana2
        ventana2.setVisible(true);

        // Cerrar la primera ventana
        this.dispose();
    }//GEN-LAST:event_jButtonCerrarActionPerformed

    private void btnBorrarMesaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBorrarMesaActionPerformed
        try {

            int filaSelecionada = Tabla.getSelectedRow();
            int id = (int) Tabla.getValueAt(filaSelecionada, 0);
            int opcion = JOptionPane.showConfirmDialog(rootPane, "Seguro que desea eliminar la Mesa N°" + id, "Confirmacion", JOptionPane.YES_NO_OPTION);

            if (opcion == JOptionPane.YES_OPTION) {
                con.borrarMesa(id);
                actualizarTabla();
            }

        } catch (ArrayIndexOutOfBoundsException a) {
            JOptionPane.showMessageDialog(this, "Seleccione una mesa, por favor");
        }

    }//GEN-LAST:event_btnBorrarMesaActionPerformed

    private void jButtonInventarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonInventarioActionPerformed
        VistaInventario ventana2 = new VistaInventario();
        ventana2.setLocationRelativeTo(null);
        // Mostrar la ventana2
        ventana2.setVisible(true);

        // Cerrar la primera ventana
        this.dispose();
    }//GEN-LAST:event_jButtonInventarioActionPerformed

    private void jButtonReservarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonReservarActionPerformed
        VistaReserva ventana2 = new VistaReserva();
        ventana2.setLocationRelativeTo(null);
        // Mostrar la ventana2
        ventana2.setVisible(true);

        // Cerrar la primera ventana
        this.dispose();
    }//GEN-LAST:event_jButtonReservarActionPerformed

    private void jButtonCrearMesaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCrearMesaActionPerformed
        try {
            String cancelar = JOptionPane.showInputDialog("Ingrese la capacidad de la mesa");
            if (cancelar == null) {
                return;

            }

            int cap = Integer.parseInt(cancelar);
            Mesa mesa = new Mesa(cap, false);
            con.guardarMesa(mesa);
            llenarTabla();
        } catch (NumberFormatException r) {
            JOptionPane.showMessageDialog(this, "ingrese solo numeros");
        }


    }//GEN-LAST:event_jButtonCrearMesaActionPerformed

    private void TablaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TablaMouseClicked
        int filaSelecionada = Tabla.getSelectedRow();
        int id = (int) Tabla.getValueAt(filaSelecionada, 0);
        mesa = con.buscarMesa(id);

    }//GEN-LAST:event_TablaMouseClicked

    private void jButtonPedido3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPedido3ActionPerformed
        VistaPedidos ventana2 = new VistaPedidos();
        ventana2.setLocationRelativeTo(null);
        // Mostrar la ventana2
        ventana2.setVisible(true);

        // Cerrar la primera ventana
        this.dispose();
    }//GEN-LAST:event_jButtonPedido3ActionPerformed

    private void btnCobrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCobrarActionPerformed

        try {
            if (pedido.buscarPedidoPorMesa(mesa.getNum()).getIdPedido() != 0 && cone.buscarDetallePorMesa(mesa.getNum()).getIdDetalle() != 0) {
                VistaCobrarMesa a1 = null;

                for (JInternalFrame frame : escritorio.getAllFrames()) {
                    if (frame instanceof VistaCobrarMesa) {
                        a1 = (VistaCobrarMesa) frame;
                        break;
                    }
                }

                if (a1 == null) {
                    // Si no hay una instancia abierta, crear una nueva
                    a1 = new VistaCobrarMesa(this);
                    escritorio.add(a1);
                }

// Mostrar la ventana y moverla al frente
                a1.setVisible(true);
                escritorio.moveToFront(a1);
            } else {
                JOptionPane.showMessageDialog(null, "Mesa " + mesa.getNum() + " no tiene pedido pendiente");
            }
        } catch (NullPointerException r) {
            JOptionPane.showMessageDialog(null, "No hay una mesa seleccionada");

        }
        llenarTabla();

    }//GEN-LAST:event_btnCobrarActionPerformed

    private void btnCargarPedidoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCargarPedidoActionPerformed
        PedidoData pedido = new PedidoData();
        try {
            if (pedido.buscarPedidoPorMesa(mesa.getNum()).getIdPedido() != 0) {
                VistaCargarPedido a1 = null;
                for (JInternalFrame frame : escritorio.getAllFrames()) {
                    if (frame instanceof VistaCargarPedido) {
                        a1 = (VistaCargarPedido) frame;
                        break;
                    }

                }
                if (a1 == null) {

                    a1 = new VistaCargarPedido(mesa, this);
                    escritorio.add(a1);

                }
                a1.setVisible(true);
                escritorio.moveToFront(a1);
            } else {
                JOptionPane.showMessageDialog(this, "Solo las mesas ocupadas pueden tener pedidos");
            }
        } catch (NullPointerException n) {
            JOptionPane.showMessageDialog(this, "Seleccione una mesa");
        }
        llenarTabla();

    }//GEN-LAST:event_btnCargarPedidoActionPerformed

    private void rdbOcupadosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdbOcupadosActionPerformed
        if (rdbOcupados.isSelected()) {
            rdbLibres.setSelected(false);
            rdbSinPedido.setSelected(false);
            rdbReserva.setSelected(false);
            rdbConPedido.setSelected(false);
            rdbSinReserva.setSelected(false);
            String txt;
            String txtm;
            String txtd;
            ArrayList<Mesa> list = con.listaMesa();
            modelo.setRowCount(0);
            for (Mesa p : list) {
                if (p.isEstado()) {
                    txt = "Ocupado";
                    if (pedido.buscarPedidoPorMesa(p.getNum()).getMesero() != null) {
                        txtm = pedido.buscarPedidoPorMesa(p.getNum()).getMesero().getNombre();
                    } else {
                        txtm = "Sin Mozo";
                    }
                    if (cone.buscarDetallePorMesa(p.getNum()).getIdDetalle() != 0) {
                        txtd = "Con Pedido";
                    } else {
                        txtd = "Sin Pedido";
                    }
                    modelo.addRow(new Object[]{p.getNum(), p.getCapacidad(), txt, p.getReserva(), txtd, txtm});

                }
            }
        } else {
            llenarTabla();
        }
    }//GEN-LAST:event_rdbOcupadosActionPerformed

    private void rdbLibresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdbLibresActionPerformed
          if (rdbLibres.isSelected()) {
            rdbOcupados.setSelected(false);
            rdbSinPedido.setSelected(false);
            rdbReserva.setSelected(false);
            rdbConPedido.setSelected(false);
            rdbSinReserva.setSelected(false);
            String txtd;
            String txt;
            String txtm;
            ArrayList<Mesa> list = con.listaMesa();
            modelo.setRowCount(0);
            for (Mesa p : list) {
                if (!p.isEstado()) {
                    txt = "Libre";
                    if (pedido.buscarPedidoPorMesa(p.getNum()).getMesero() != null) {
                        txtm = pedido.buscarPedidoPorMesa(p.getNum()).getMesero().getNombre();
                    } else {
                        txtm = "Sin Mozo";
                    }
                    if (cone.buscarDetallePorMesa(p.getNum()).getIdDetalle() != 0) {
                        txtd = "Con Pedido";
                    } else {
                        txtd = "";
                    }
                    modelo.addRow(new Object[]{p.getNum(), p.getCapacidad(), txt, p.getReserva(), txtd, txtm});

                }
            }
        } else {
            llenarTabla();
        }
    }//GEN-LAST:event_rdbLibresActionPerformed

    private void rdbReservaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdbReservaActionPerformed
            if (rdbReserva.isSelected()) {
            rdbOcupados.setSelected(false);
            rdbSinPedido.setSelected(false);
            rdbLibres.setSelected(false);
            rdbConPedido.setSelected(false);
            rdbSinReserva.setSelected(false);
            String txtd;
            String txt;
            String txtm;
            ArrayList<Mesa> list = con.listaMesaDeReservas();
            modelo.setRowCount(0);
            for (Mesa p : list) {
                if (p.isEstado()) {
                    txt = "Ocupado";
                } else {
                    txt = "Libre";
                }
                if (pedido.buscarPedidoPorMesa(p.getNum()).getMesero() != null) {
                    txtm = pedido.buscarPedidoPorMesa(p.getNum()).getMesero().getNombre();
                } else {
                    txtm = "Sin Mozo";
                }
                if (cone.buscarDetallePorMesa(p.getNum()).getIdDetalle() != 0) {
                    txtd = "Con Pedido";
                } else {
                    txtd = "";
                }
                modelo.addRow(new Object[]{p.getNum(), p.getCapacidad(), txt, p.getReserva(), txtd, txtm});
            }
        } else {
            llenarTabla();
        }
    }//GEN-LAST:event_rdbReservaActionPerformed

    private void rdbConPedidoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdbConPedidoActionPerformed
        if (rdbConPedido.isSelected()) {
            rdbOcupados.setSelected(false);
            rdbSinPedido.setSelected(false);
            rdbLibres.setSelected(false);
            rdbReserva.setSelected(false);
            rdbSinReserva.setSelected(false);
            String txt;
            String txtm;
            String txtd;
            ArrayList<Mesa> list = con.listaMesa();
            modelo.setRowCount(0);
            for (Mesa p : list) {
                if (cone.buscarDetallePorMesa(p.getNum()).getIdDetalle() != 0) {
                    txtd = "Con Pedido";

                    if (p.isEstado()) {
                        txt = "Ocupado";
                    } else {
                        txt = "Libre";
                    }
                    if (pedido.buscarPedidoPorMesa(p.getNum()).getMesero() != null) {
                        txtm = pedido.buscarPedidoPorMesa(p.getNum()).getMesero().getNombre();
                    } else {
                        txtm = "Sin Mozo";
                    }

                    modelo.addRow(new Object[]{p.getNum(), p.getCapacidad(), txt, p.getReserva(), txtd, txtm});
                }
            }
        } else {
            llenarTabla();
        }
    }//GEN-LAST:event_rdbConPedidoActionPerformed

    private void rdbSinPedidoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdbSinPedidoActionPerformed
        if (rdbSinPedido.isSelected()) {
            rdbOcupados.setSelected(false);
            rdbSinReserva.setSelected(false);
            rdbLibres.setSelected(false);
            rdbReserva.setSelected(false);
            rdbConPedido.setSelected(false);
            String txt;
            String txtm;
            String txtd;
            ArrayList<Mesa> list = con.listaMesa();
            modelo.setRowCount(0);
            for (Mesa p : list) {
                if (cone.buscarDetallePorMesa(p.getNum()).getIdDetalle() == 0) {
                    txtd = "";

                    if (p.isEstado()) {
                        txt = "Ocupado";
                    } else {
                        txt = "Libre";
                    }
                    if (pedido.buscarPedidoPorMesa(p.getNum()).getMesero() != null) {
                        txtm = pedido.buscarPedidoPorMesa(p.getNum()).getMesero().getNombre();
                    } else {
                        txtm = "Sin Mozo";
                    }

                    modelo.addRow(new Object[]{p.getNum(), p.getCapacidad(), txt, p.getReserva(), txtd, txtm});
                }
            }
        } else {
            llenarTabla();
        }
    }//GEN-LAST:event_rdbSinPedidoActionPerformed

    private void rdbSinReservaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdbSinReservaActionPerformed
        if (rdbSinReserva.isSelected()) {
            rdbOcupados.setSelected(false);
            rdbSinPedido.setSelected(false);
            rdbLibres.setSelected(false);
            rdbReserva.setSelected(false);
            rdbConPedido.setSelected(false);
            String txtd;
            String txt;
            String txtm;
            ArrayList<Mesa> list = con.listaMesa();
            modelo.setRowCount(0);
            for (Mesa p : list) {
            
                if (p.getReserva() == null) {
                  
                    if (p.isEstado()) {
                        txt = "Ocupado";
                    } else {
                        txt = "Libre";
                    }
                    if (pedido.buscarPedidoPorMesa(p.getNum()).getMesero() != null) {
                        txtm = pedido.buscarPedidoPorMesa(p.getNum()).getMesero().getNombre();
                    } else {
                        txtm = "Sin Mozo";
                    }
                    if (cone.buscarDetallePorMesa(p.getNum()).getIdDetalle() != 0) {
                        txtd = "Con Pedido";
                    } else {
                        txtd = "";
                    }
                    modelo.addRow(new Object[]{p.getNum(), p.getCapacidad(), txt, p.getReserva(), txtd, txtm});
                }
            }
        } else {
            llenarTabla();
        }


    }//GEN-LAST:event_rdbSinReservaActionPerformed

    /**
     * @param args the command line arguments
     */
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable Tabla;
    private javax.swing.JButton btnActualizarMesa;
    private javax.swing.JButton btnBorrarMesa;
    private javax.swing.JButton btnCargarPedido;
    private javax.swing.JButton btnCobrar;
    private javax.swing.JDesktopPane escritorio;
    private javax.swing.JButton jButtonCerrar;
    private javax.swing.JButton jButtonCrearMesa;
    private javax.swing.JButton jButtonInventario;
    private javax.swing.JButton jButtonPedido3;
    private javax.swing.JButton jButtonReservar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JRadioButton rdbConPedido;
    private javax.swing.JRadioButton rdbLibres;
    private javax.swing.JRadioButton rdbOcupados;
    private javax.swing.JRadioButton rdbReserva;
    private javax.swing.JRadioButton rdbSinPedido;
    private javax.swing.JRadioButton rdbSinReserva;
    // End of variables declaration//GEN-END:variables
 public void iniciarTabla() {

        modelo.addColumn("Nº");
        modelo.addColumn("Capacidad");
        modelo.addColumn("Activa");
        modelo.addColumn("Reserva");
        modelo.addColumn("Pedido");
        modelo.addColumn("Mozo");
        Tabla.setModel(modelo);
    }

    public void llenarTabla() {
        String txt;
        String txtm;
        String txtd;
        ArrayList<Mesa> list = con.listaMesa();
        modelo.setRowCount(0);
        for (Mesa p : list) {
            if (p.isEstado()) {
                txt = "Ocupado";
            } else {
                txt = "Libre";
            }
            if (pedido.buscarPedidoPorMesa(p.getNum()).getMesero() != null) {
                txtm = pedido.buscarPedidoPorMesa(p.getNum()).getMesero().getNombre();
            } else {
                txtm = "Sin Mozo";
            }
            if (cone.buscarDetallePorMesa(p.getNum()).getIdDetalle() != 0) {
                txtd = "Con Pedido";
            } else {
                txtd = "";
            }
            modelo.addRow(new Object[]{p.getNum(), p.getCapacidad(), txt, p.getReserva(), txtd, txtm});

        }

    }

    public void actualizarTabla() {
        llenarTabla();
    }

}
